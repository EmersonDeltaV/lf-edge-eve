// Copyright(c) 2017-2022 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "evecommon/devmodelcommon.proto";
import "evecommon/evecommon.proto";

package org.lfedge.eve.info;
option go_package  = "github.com/lf-edge/eve/api/go/info";

option java_package = "org.lfedge.eve.info";


// Deprecated: see deprecatedMetricItem below
enum DepMetricItemType {
  DepMetricItemOther = 0;          // E.g., a string like an ESSID
  DepMetricItemGauge = 1;          // Goes up and down over time
  DepMetricItemCounter = 2;        // Monotonically increasing (until reboot)
  DepMetricItemState = 3;          // Toggles on and off; count transitions
}

// A generic metric item.
// Deprecated: Prefer to use dedicated proto message definitions for all metrics.
message deprecatedMetricItem {
  string key = 1;
  DepMetricItemType type = 2;
  oneof metricItemValue {
    bool boolValue = 3;
    uint32 uint32Value = 4; // If timer this is in seconds
    uint64 uint64Value = 5;
    float floatValue = 6;
    string stringValue = 7; // Use with care
  }
}

// Map from MAC to IP addresses
message ZmetIPAssignmentEntry {
  string macAddress = 1;
  repeated string ipAddress = 2;
}

// Map from vifname to other info
message ZmetVifInfo {
  string vifName = 1;
  string macAddress = 2;
  string appID = 3; // UUID
}

/*
 * Broadly there are two types
 * Info : information that is discovered/rarely changes
 * Metrics: information that gets updated periodically
 * Protobuf definitions in this file follow the convention.
 */
enum ZInfoTypes {
  ZiNop = 0;
  ZiDevice = 1;
  // deprecated = 2;
  ZiApp = 3;
  // deprecated = 4;
  // deprecated = 5;
  ZiNetworkInstance = 6;
  ZiVolume = 7;
  ZiContentTree = 8;
  ZiBlobList = 9;
  ZiAppInstMetaData = 10;
  ZiHardware = 11;
  ZiEdgeview = 12;
  ZiLocation = 13;
}

// Information about assignable I/O adapter bundles
message ZioBundle {
  org.lfedge.eve.common.PhyIoType type = 1;
  string name = 2;              // Short hand name such as "com"
  repeated string members = 3;  // E.g., "com1", "com2"
  string usedByAppUUID = 4;
  bool usedByBaseOS = 5;
  repeated IoAddresses ioAddressList = 6; // One per member
  org.lfedge.eve.common.PhyIoMemberUsage usage = 7; // Usage of the IoBundle
  ErrorInfo err = 8; // Any errors on the IoBundle
}

message IoAddresses {
  string macAddress = 1;
  VfPublishedInfo vf_info = 2;
}

// Information published for Virtual Function (VF) created by SR-IOV
// Used only for Virtual Functions (VFs) not Physical Functions (PFs)
// Reference structure in pkg/pillar/assignableadapters.go VfInfo
message VfPublishedInfo {
  uint32 index = 1;
  uint32 vlan_id = 2;
}

// Manufacturing info, product name, model, version etc.
// From dmidecode/BIOS on Intel
message ZInfoManufacturer {
  string manufacturer = 1;
  string productName = 2;
  string version = 3;
  string serialNumber = 4;
  string UUID = 5;             // From BIOS; different than device UUID
  string compatible = 6;       // From /proc/device-tree/compatible on ARM
  string biosVendor = 7;
  string biosVersion = 8;
  string biosReleaseDate = 9;
}

message ZInfoNetwork {
  // deprecated = 1;
  // deprecated = 2;
  string macAddr = 3;

  // devName - Must be set to SystemAdapter.Name which is the Logicallabel
  string devName = 4;
  // alias - Must be set to SystemAdapter.alias
  string alias = 40;


  repeated string IPAddrs = 5; // All IP addresses with /N for subnet
  repeated string defaultRouters = 6; // If DHCP assigned
  ZInfoDNS dns = 7; // If DHCP assigned
  bool ipv4_up = 8; // operational up/down status.
  GeoLoc location = 9;
  bool uplink = 10; // Uplink interface  // XXX rename to isMgmt
  ErrorInfo networkErr = 11; // For instance bad proxy config

  // Ifname from PhysicalIo - eth0, eth1 etc
  string localName = 12;

  ProxyStatus proxy = 13;

  // IP address leased by dnsmasq to app does not match the IP address allocated by zedrouter
  bool ip_addr_mis_match = 14;

  // IP addresses of NTP servers being used
  repeated string ntp_servers = 15;
}

// From an IP address-based geolocation service
// XXX later define GPS coordinates from device
message GeoLoc {
  string UnderlayIP = 1;
  string Hostname = 2;
  string City = 3;
  string Region = 4;
  string Country = 5;
  string Loc = 6;
  string Org = 7;
  string Postal = 8;
}

// This is used both to represent the information we receive from DHCP
// for each interface, and the information the device is using
// (from /etc/resolv.conf). The latter could be different than what's received
// from DHCP on all the interfaces
message ZInfoDNS {
  repeated string DNSservers = 1;
  string DNSdomain = 2;
  repeated string DNSsearch = 3;
}

// Enum names from OMA-TS-LWM2M_SwMgmt-V1_0-20151201-C
// plus additions starting at BOOTING
// This is used for Existing Objects. For any New objects, create and use
// a Separate enum for SwState specific to that  object. Ex: ZDeviceState
enum ZSwState {
  INVALID               = 0;
  INITIAL               = 1;    // Config received
  DOWNLOAD_STARTED      = 2;    // Download in-progress
  DOWNLOADED            = 3;    // Download completed, verification in-progress
  DELIVERED             = 4;    // Verification completed
  INSTALLED             = 5;    // Installed, ready for activation
  BOOTING               = 6;    // booting. Booting and above means that App is activated.
  // Terminal State
  // For AppInstance, RUNNING is equivalent to ONLINE.
  RUNNING               = 7;    // Object is Online / Running

  HALTING               = 8;    // being halted
  HALTED                = 9;    // Halted
  RESTARTING            = 10;   // Restarting due to restart command
  PURGING               = 11;   // Purging due to purge command
  // Prior to DOWNLOAD_STARTED we go through these:
  RESOLVING_TAG         = 12;   // Resolving an image tag
  RESOLVED_TAG          = 13;   // Tag has been resolved/failed
  // Prior to INSTALLED we go through these:
  CREATING_VOLUME       = 14;   // Volume create in progress

  // Terminal State for Volumes
  // For Volumes, CREATED_VOLUME is equivalent to ONLINE.
  CREATED_VOLUME        = 15;   // Volume create done/failed

  VERIFYING             = 16;   // Verification in-progress
  VERIFIED              = 17;   // Verification completed
  LOADING               = 18;   // Loading blob in CAS

  // Terminal State for some objects.
  // For objects like ContentTree and Blob, Loaded is equivalent to
  // ONLINE state for the object
  LOADED                = 19;   // Loaded blob in CAS

  AWAITNETWORKINSTANCE  = 20;   // Wait for network instance

  // Terminal State - Object in Error State
  // If an App Instance encounters an Error, it will be in ERROR
  // state. If an App Instance is in ERROR state, it means there is NO DOMAIN
  // currently running.
  ERROR                 = 21;   // Error State

  // It would have been ideal to leave a gap before the ERROR state.
  // Since we cannot change the existing states now, introduce the
  // START_DELAYED state after ERROR.
  // Had to prefix with Z_SW_STATE_ to satisfy yetus checks.
  START_DELAYED = 22; // App has been configured to start with delay by user
}

// SW Info for Apps
// XXX to be deprecated once we've completely moved to volumes
message ZInfoSW {
  string swVersion = 2;
  string swHash = 3;
  ZSwState state = 4;           // State of Software Image download/install
  string target = 6;            // E.g., "disk", "kernel", "device-tree"
  string vdev = 7;              // E.g., "xvda"
  uint32 downloadProgress = 8;  // Download progress; 0-100 percent
  string imageName = 9;         // Name of the disk image
}

// Errors in response to the application of configuration
message ErrorInfo {
  string description = 1;
  google.protobuf.Timestamp timestamp = 2;  // Timestamp at which error had occurred
  Severity severity = 3;                    // Severity of the error
  repeated DeviceEntity entities = 4;       // objects referenced by the description or retry_condition
  string retry_condition = 5;               // condition to retry
}

// DeviceEntity contains the device entity details
message DeviceEntity {
  Entity entity = 1;           // entity type
  string entity_id = 2;        // entity uuid
  string entity_name = 3;      // entity name
}

// Entity contains the entity type
enum Entity {
  // Invalid Device Entity
  ENTITY_UNSPECIFIED = 0;
  // Base OS entity
  ENTITY_BASE_OS = 1;
  // System Adapter Entity
  ENTITY_SYSTEM_ADAPTER = 2;
  // Vault Entity
  ENTITY_VAULT = 3;
  // Attestation Entity
  ENTITY_ATTESTATION = 4;
  // App Instance Entity
  ENTITY_APP_INSTANCE = 5;
  // Port Entity
  ENTITY_PORT = 6;
  // Network Entity
  ENTITY_NETWORK = 7;
  // Network Instance Entity
  ENTITY_NETWORK_INSTANCE = 8;
  // ContentTree Entity
  ENTITY_CONTENT_TREE = 9;
  // Blob Entity
  ENTITY_CONTENT_BLOB = 10;
  // VOLUME Entity
  ENTITY_VOLUME = 11;
}

// Severity tells the severity type
enum Severity {
  SEVERITY_UNSPECIFIED = 0; // severity unspecified
  SEVERITY_NOTICE = 1;      // severity notice
  SEVERITY_WARNING = 2;     // severity warning
  SEVERITY_ERROR = 3;       // severity error
}

enum HwSecurityModuleStatus {
  UNKNOWN  = 0;  //HSM Status is not known
  NOTFOUND = 1;  //No HSM found
  DISABLED = 2;  //HSM found, but not being used
  ENABLED  = 3;  //HSM is found and being actively used
}

enum DataSecAtRestStatus {
  DATASEC_AT_REST_UNKNOWN  = 0; // Status is unknown
  DATASEC_AT_REST_DISABLED = 1; // Enabled, but not being used
  DATASEC_AT_REST_ENABLED = 2;  // Enabled, and used
  DATASEC_AT_REST_ERROR = 4;    // Enabled, but encountered an error
}

enum PCRStatus {
  PCR_UNKNOWN = 0;  // Status is unknown
  PCR_ENABLED = 1;  // Enabled PCR
  PCR_DISABLED = 2; // Disabled PCR
}

message VaultInfo {
  string name = 1;                //Name of the vault
  DataSecAtRestStatus status = 2; //Status of the vault
  ErrorInfo vaultErr = 3;         //Additional info in case of failure
  PCRStatus pcrStatus = 4;        //Status of the PCR
}

message DataSecAtRest {
  DataSecAtRestStatus status = 1;   // Deprecated
  string info = 2;                  // Deprecated
  repeated VaultInfo vaultList = 3; // per-Vault Info
}

message SecurityInfo {
  bytes sha_root_ca = 1;    // sha256 of /config/root-certificate.pem
  bytes sha_tls_root_ca = 2; // sha256 of /config/v2tlsbaseroot-certificates.pem
}

message ZInfoConfigItem {
  string value = 1;
  string error = 2;
}

message ZInfoConfigItemStatus {
  map<string, ZInfoConfigItem> configItems = 1;
  map<string, ZInfoConfigItem> unknownConfigItems = 2;
}

// ZInfoAppInstance - send a summary of App Instance so that controller knows
// how many App Instances are still present on the device. Controller
// can then use it to wait for an app to be fully deleted etc.
message ZInfoAppInstance {
  string uuid = 1;
  string name = 2;
  string domainName = 3;
}

// ZInfoDeviceTasks - send a summary of tasks so that controller knows
// how many app instance tasks are still present on the device. Controller
// can then use it to wait for an app to be fully deleted etc.
message ZInfoDeviceTasks {
  string name = 1;
  string namespace = 2;
  // deprecated 3
}

enum ZSimcardState {
  Z_SIMCARD_STATE_INVALID     = 0;
  Z_SIMCARD_STATE_ASSIGNED    = 1;
  Z_SIMCARD_STATE_PROVISIONED = 2;
  Z_SIMCARD_STATE_ACTIVE      = 3;
  Z_SIMCARD_STATE_SUSPENDED   = 4;
  Z_SIMCARD_STATE_CANCELLED   = 5;
}

message ZSimcardInfo {
  // Name is a SIM card identifier. For example ICCID if available.
  // Guaranteed to be unique only in the scope of the edge node.
  string name = 1;
  // Reference to ZCellularModuleInfo.name
  string cell_module_name = 2;
  string imsi = 3;
  string iccid = 4;
  ZSimcardState state = 5;
}

message ZCellularModuleInfo {
  // Name is a module identifier. For example IMEI if available.
  // Guaranteed to be unique only in the scope of the edge node.
  string name = 1;
  string imei = 2;
  string firmware_version = 3;
  string model = 4;
  ZCellularOperatingState operating_state = 5;
  ZCellularControlProtocol control_protocol = 6;
}

enum ZCellularOperatingState {
  Z_CELLULAR_OPERATING_STATE_UNSPECIFIED = 0;
  Z_CELLULAR_OPERATING_STATE_OFFLINE = 1;
  Z_CELLULAR_OPERATING_STATE_RADIO_OFF = 2; // AKA Radio-Silence mode
  Z_CELLULAR_OPERATING_STATE_ONLINE = 3;
  Z_CELLULAR_OPERATING_STATE_ONLINE_AND_CONNECTED = 4;
  Z_CELLULAR_OPERATING_STATE_UNRECOGNIZED = 5;
}

enum ZCellularControlProtocol {
  Z_CELLULAR_CONTROL_PROTOCOL_UNSPECIFIED = 0;
  Z_CELLULAR_CONTROL_PROTOCOL_QMI = 1;
  Z_CELLULAR_CONTROL_PROTOCOL_MBIM = 2;
}

message ZCellularProvider {
  // Public land mobile network code.
  string plmn = 1;
  string description = 2;
  // True if this is the provider currently being used.
  bool current_serving = 3;
  bool roaming = 4;
}

// Device Run State
enum ZDeviceState {
    // Just to handle Un-Initialized runState variable Internally
    ZDEVICE_STATE_UNSPECIFIED = 0;
    // Device is Online. This only means all components of EVE are up.
    // This does not indicate the Status of Apps or other configured objects.
    // During booting up after reboot, Device might be reported as ONLINE
    // while apps are still being processed.
    ZDEVICE_STATE_ONLINE = 1;
    // Device Reboot in Progress. Device is in the process of going down.
    // Once the device comes back up and Eve is started, device reports the
    // the state as "BOOTING"
    ZDEVICE_STATE_REBOOTING = 2;
    ZDEVICE_STATE_MAINTENANCE_MODE = 3;
    // Device BaseOs Update in Progress
    ZDEVICE_STATE_BASEOS_UPDATING = 4;
    // Device is booting up. This state is reported when EVE is started and
    // is able to communicate with the controller. When all the components of
    // EVE are up, it transitions to ONLINE.
    ZDEVICE_STATE_BOOTING = 5;
    // device preparing power off - shutting down all app instances
    ZDEVICE_STATE_PREPARING_POWEROFF = 6;
    // device powering off from local profile server
    ZDEVICE_STATE_POWERING_OFF = 7;
    // device prepared power off - all app instances are shut down
    ZDEVICE_STATE_PREPARED_POWEROFF = 8;
}

enum StorageStatus {
  STORAGE_STATUS_UNSPECIFIED = 0;
  STORAGE_STATUS_ONLINE = 1;   // The device or virtual device is in normal working order.
  STORAGE_STATUS_DEGRADED = 2; // The virtual device has experienced a failure but can still function.
  STORAGE_STATUS_FAULTED = 3;  // The device or virtual device is completely inaccessible.
  STORAGE_STATUS_OFFLINE = 4;  // The device has been explicitly taken offline by the administrator.
  STORAGE_STATUS_UNAVAIL = 5;  // The device or virtual device cannot be opened. In some cases, pools with UNAVAIL devices appear in DEGRADED mode.
  STORAGE_STATUS_REMOVED = 6;  // The device was physically removed while the system was running.
  STORAGE_STATUS_SUSPENDED = 7; // A pool that is waiting for device connectivity to be restored.
}

message StorageDiskState {
  org.lfedge.eve.common.DiskDescription disk_name = 1;
  StorageStatus status = 2;            // In ZFS
  string state = 3;                   // VDev aux state
}

enum StorageRaidType {
  STORAGE_RAID_TYPE_UNSPECIFIED = 0;
  STORAGE_RAID_TYPE_RAID0 = 1;             // RAID-0
  STORAGE_RAID_TYPE_RAID1 = 2;             // Mirror
  STORAGE_RAID_TYPE_RAID5 = 3;             // raidz1 (RAID-5)
  STORAGE_RAID_TYPE_RAID6 = 4;             // raidz2 (RAID-6)
  STORAGE_RAID_TYPE_RAID7 = 5;             // raidz3 (RAID-7)
  STORAGE_RAID_TYPE_NORAID = 6;            // without RAID
}

enum StorageTypeInfo {
  STORAGE_TYPE_INFO_UNSPECIFIED = 0;
  STORAGE_TYPE_INFO_EXT4 = 1;
  STORAGE_TYPE_INFO_ZFS = 2;
}

message SmartAttr {
  uint32 id = 1;
  uint64 value = 2;   // the current value of the parameter
  uint64 worst = 3;   // worst value that Value has ever reached
  uint64 thresh = 4;  // the value that the Value of the same attribute must reach for the attribute's state to be considered critical.
  string when_failed = 5; // critical state if no empty
  uint64 raw_value = 6; // Contains miscellaneous meter readings (where applicable)
}

message SmartMetric {
  SmartAttr reallocated_sector_ct = 1; // Count of reallocated sectors. The higher the attribute value, the more sectors were reallocated
  SmartAttr power_on_hours = 2; // Count of hours in power-on state.
  SmartAttr power_cycle_count = 3; // This attribute indicates the count of full hard disk power on/off cycles
  SmartAttr reallocated_event_count = 4; // Count of remap operations. Shows the total count of attempts.
  SmartAttr current_pending_sector = 5; // Count of "unstable" sectors (waiting to be remapped, because of unrecoverable read errors)
  bool need_update = 6; // Indicates that data has changed
  SmartAttr temperature = 7; // Indicates the device temperature, if the appropriate sensor is fitted.
}

message StorageDiskInfo {
  string disk_name = 1;
  repeated SmartMetric smart_data = 3; // smartctl output
  string wwn = 4;
  string serial_number = 5;
  string model = 6; // Intel 123456F
  string collector_errors = 7; // Reports errors when collecting information. Default and normal value = ""
}

// For nested structures like pool of stripes of mirrors we should define this structure
message StorageChildren {
  StorageRaidType current_raid = 1;
  repeated StorageDiskState disks = 2;
  repeated StorageChildren children = 3;
  string display_name = 4;  // A string which can be used to organize the display. Not unique.
  uint64 g_u_i_d = 5;       // A unique identifier for the storage object (RAID or mirror)
}

// Information about storage system
message StorageInfo {
  string pool_name = 1;
  StorageTypeInfo storage_type = 2; // Storage type zfs or ext4
  string zfs_version = 3;
  StorageRaidType current_raid = 4; // Current RAID configuration. When no have RAID send STORAGE_RAID_TYPE_NORAID
  double compression_ratio = 5;     // Compression ratio
  uint64 zpool_size = 6;            // Storage pool size.
  uint32 count_zvols = 7;           // zvols count
  StorageStatus storage_state = 8;  // zfs zpool status
  repeated StorageDiskState disks = 9;  // Disks lists in EVE (use in storage)
  string collector_errors = 10; // Reports errors when collecting information. Default and normal value = ""
  repeated StorageChildren children = 11; // If we have nested objects we should define them here
  string pool_status_msg = 12;  // pool status msg
}

// Information about the system that is sent once when the system boots
message ZInfoHardware {
  repeated StorageDiskInfo disks = 1; // S.M.A.R.T. info for disks
}

// Base device info, as discovered by Xen (or OS on bare metal)
message ZInfoDevice {
  string machineArch = 4;
  string cpuArch = 5;
  string platform = 6;
  uint32 ncpu = 7;
  // memory - Total system memory available (in MBytes). Firmware might use
  // some memory making it unavailable to the hypervisor - So this could be
  // less than the amount stated by the hardware manufacturer
  uint64 memory = 8;
  uint64 storage = 9;  // in MBytes for the currently active image filesystem

  // Value of'Power_Cycle_Count' from SMART.
  // -1 is assigned if SMART is disabled or 'Power_Cycle_Count' is unavailable.
  int64 powerCycleCounter = 10;

  ZInfoManufacturer minfo = 11;

  // OBSOLETE. The information will be provided by DevicePort instead.
  // Newer versions will not fill in this information. Controller Needs
  // to check check if this is empty - if yes, use the DevicePortStatus instead.
  repeated ZInfoNetwork network = 13;

  repeated ZioBundle assignableAdapters = 15;
  ZInfoDNS dns = 16; // What is used in resolv.conf
  repeated ZInfoStorage storageList = 17;

  google.protobuf.Timestamp bootTime = 18;

  repeated ZInfoDevSW swList = 19;
  string   HostName = 20;

  repeated deprecatedMetricItem metricItems = 21; // For instance, static LTE network info

  string   lastRebootReason = 22;
  google.protobuf.Timestamp lastRebootTime = 23;

  SystemAdapterInfo systemAdapter = 24;
  uint32 restartCounter = 25; // Number of times zedagent has restarted i.e., device reboot

  HwSecurityModuleStatus HSMStatus = 26; //State of hardware security modules, like TPM
  string HSMInfo = 27; //Information about HSM like TPM vendor, TEE type etc.
  string lastRebootStack = 28;
  DataSecAtRest dataSecAtRestInfo = 29; //Info about Data At Rest Security
  SecurityInfo sec_info = 30;

  ZInfoConfigItemStatus configItemStatus = 31;
  repeated ZInfoAppInstance appInstances = 32;
  // rebootConfigCounter - reboot command counter from config last processed by
  // eve
  uint32 rebootConfigCounter = 33;
  BootReason   last_boot_reason = 34;

  // Cellular / LTE related information
  repeated ZCellularModuleInfo cell_radios = 35;
  repeated ZSimcardInfo sims = 36;
  repeated ZInfoDeviceTasks tasks = 37;

  bool maintenance_mode = 38;
  // XXX to be deprecated in favor of maintenance_mode_reasons
  MaintenanceModeReason maintenance_mode_reason = 39;

  // Is /dev/watchdog present in the system
  bool hardware_watchdog_present = 40;

  // Are we in the process of rebooting EVE?
  bool reboot_inprogress = 41;

  // Information about hardware capabilities
  Capabilities capabilities = 42;

  // BaseOsUpdate Counter. This must be updated only when:
  // 1) if the configured BaseOs partition is set to UPDATED, mirror
  // the current value of baseos_update.counter
  // 2) At the start if a BaseOs update (either from a partition in error state
  // or from UPDATED state of another version), copy over current
  // deviceConfig.baseOs_update_counter
  uint32 baseos_update_counter = 43;

  // Device State
  ZDeviceState state = 44;

  // Is there a local_profile from a local_profile_server?
  // The global_profile from the controller is not echoed in this field.
  string local_profile = 45;
  repeated MaintenanceModeReason maintenance_mode_reasons = 46;

  string dormant_time = 47 [deprecated = true];
  repeated StorageInfo storage_info = 48;

  // shutdown command counter from EdgeDevConfig last processed by eve
  uint32 shutdown_config_counter = 49;

  // state of attestation process of eve
  AttestationInfo attestation_info = 50;

  // Capability indicating which new EdgeDevConfig fields which are supported
  APICapability api_capability = 51;

  // Reports the remote access status
  bool remote_access_disabled = 52;
}

// Capabilities indicates features in the EdgeDevConfig where there is
// no easy way to otherwise determine whether or not they are parsed and
// supported by EVE-OS
// A larger number indicates all lower numbers are also supported thus
// this works similar to a version field for the EdgeDevConfig support.
enum APICapability {
  API_CAPABILITY_UNSPECIFIED = 0;
  API_CAPABILITY_RETRY_UPDATE = 1; // BaseOs.retry_update counter supported
  API_CAPABILITY_SHUTDOWN = 2; // shutdown DevOpsCmd support
  API_CAPABILITY_START_DELAY_IN_SECONDS = 3; // start_delay_in_seconds supported
  // Coming soon:
  // API_CAPABILITY_EDGEVIEW = 4; // edgeview and edgeview.token supported
  // Add new values as new EdgeDevConfig API features are implemented
}

// Different reasons for a boot/reboot
// Must match the values in pkg/pillar/types.BootReason
enum BootReason {
  BOOT_REASON_UNSPECIFIED = 0;
  BOOT_REASON_FIRST = 1;
  BOOT_REASON_REBOOT_CMD = 2;
  BOOT_REASON_UPDATE = 3;
  BOOT_REASON_FALLBACK = 4;
  BOOT_REASON_DISCONNECT = 5;
  BOOT_REASON_FATAL = 6;
  BOOT_REASON_OOM = 7;
  BOOT_REASON_WATCHDOG_HUNG = 8;
  BOOT_REASON_WATCHDOG_PID = 9;
  BOOT_REASON_KERNEL = 10;
  BOOT_REASON_POWER_FAIL = 11;
  BOOT_REASON_UNKNOWN = 12;
  BOOT_REASON_VAULT_FAILED = 13;
  BOOT_REASON_POWEROFF_CMD = 14; // From Local Profile Server poweroff
  BOOT_REASON_PARSE_FAIL = 255;
}

// Different reasons why we are in maintenance mode
// Must match the values in pkg/pillar/types.MaintenceModeReason
enum MaintenanceModeReason {
  MAINTENANCE_MODE_REASON_NONE = 0;
  MAINTENANCE_MODE_REASON_USER_REQUESTED = 1;
  MAINTENANCE_MODE_REASON_VAULT_LOCKED_UP = 2;
  MAINTENANCE_MODE_REASON_LOW_DISK_SPACE = 3;
}

// Information about attestation process
message AttestationInfo {
  AttestationState state = 1;   //current state of attestation
  ErrorInfo error = 2;          //last error
}

// Different states of attestation process
// Must match the values in pkg/pillar/attest.State
// We do not expect StateAny to be published as not a real state
enum AttestationState {
  ATTESTATION_STATE_UNSPECIFIED = 0;            //State when (Re)Starting attestation
  ATTESTATION_STATE_NONCE_WAIT = 1;             //Waiting for response from Controller for Nonce request
  ATTESTATION_STATE_TPM_QUOTE_WAIT = 2;         //Waiting for TPM PCR quote to be published from the tpmmgr
  ATTESTATION_STATE_TPM_ESCROW_WAIT = 3;        //Waiting for TPM Escrow data to be published from the tpmmgr
  ATTESTATION_STATE_ATTEST_WAIT = 4;            //Waiting for response from Controller for PCR quote
  ATTESTATION_STATE_ATTEST_ESCROW_WAIT = 5;     //Waiting for response from Controller for Escrow data
  ATTESTATION_STATE_RESTART_WAIT = 6;           //Waiting for restart timer to expire, to start all over again
  ATTESTATION_STATE_COMPLETE = 7;               //Everything w.r.t attestation is complete
}

// Different types of app instance metadata
enum AppInstMetaDataType {
  APP_INST_META_DATA_TYPE_NONE = 0;
  APP_INST_META_DATA_TYPE_KUBE_CONFIG = 1;
  APP_INST_META_DATA_TYPE_CUSTOM_STATUS = 2;
}


// The current and fallback system adapter information
message SystemAdapterInfo {
  uint32 currentIndex = 1; // Zero means the first/highest priority is used
  repeated DevicePortStatus status = 2;
}

message DevicePortStatus {
  uint32 version = 1;
  string key = 2;
  google.protobuf.Timestamp timePriority = 3;
  google.protobuf.Timestamp lastFailed = 4;
  google.protobuf.Timestamp lastSucceeded = 5;
  repeated DevicePort ports = 6;
  string lastError = 7;
}

message DevicePort {
  string ifname = 1;
  string name = 2;   // Logical name set by controller; same as logicallabel
  bool isMgmt = 3;
  bool free = 4; // DEPRECATED - use cost instead with zero cost meaning free
  // DhcpConfig
  uint32 dhcpType = 11;
  string subnet = 12;
  // gateway - OBSOLETE - obsoleted by defaultRouters
  string gateway = 13;
  // domainname - OBSOLETE - obsoleted by dns
  string domainname = 14;
  string ntpServer = 15;
  // dnsServers - OBSOLETE - obsoleted by dns
  repeated string dnsServers = 16;
  string dhcpRangeLow = 17;
  string dhcpRangeHigh = 18;

  ProxyStatus proxy = 21;
  string macAddr = 22;
  repeated string IPAddrs = 23; // All IP addresses with /N for subnet
  repeated string defaultRouters = 24; // If DHCP assigned
  ZInfoDNS dns = 25; // If DHCP assigned
  bool up = 26;      // operational up/down status.
  GeoLoc location = 27;
  ErrorInfo err = 29; // Any errors on the interface.
  org.lfedge.eve.common.PhyIoMemberUsage usage = 30; // Usage of the Device port
  string networkUUID = 31; // Network UUID configured for the port.
  uint32 cost = 32; // Zero is free. Max is 255.
  WirelessStatus wireless_status = 33; // defined for cellular/WiFi ports only
}

message ProxyStatus {
  repeated ProxyEntry proxies = 1;
  string exceptions = 2;
  string pacfile = 3;
  bool networkProxyEnable = 4;
  string networkProxyURL = 5;
  string wpadURL = 6;
  // XXX add? In config
  // repeated bytes proxyCertPEM = 7;
}

message ProxyEntry {
  uint32 type = 1; // From NPT_ types aka proxyProto
  string server = 2;
  uint32 port = 3;
}

message WirelessStatus {
  WirelessType type = 1;
  ZCellularStatus cellular = 2;
  // later we may add status for WiFi
}

enum WirelessType {
  WIRELESS_TYPE_UNSPECIFIED = 0;
  WIRELESS_TYPE_WIFI = 1;
  WIRELESS_TYPE_CELLULAR = 2;
}

message ZCellularStatus {
  // Name reference (ZCellularModuleInfo.name) to the corresponding cellular module
  // from the list ZInfoDevice.cell_radios.
  string cellular_module = 1;
  // Each item is a name reference (ZSimcardInfo.name) to a SIM card from the list ZInfoDevice.sims.
  // Ordered by slot numbers.
  repeated string sim_cards = 2;
  // List of available cellular service providers.
  repeated ZCellularProvider providers = 3;
  // If EVE failed to configure the cellular connection, the error is published here.
  string config_error = 10;
  // if the connectivity probing is failing, error is reported here
  // (see CellularConnectivityProbe).
  string probe_error = 11;
}

// SW Info for the device base OS
// Many of these fields are for debug purposes. The ones intended
// for the UI/cli are userStatus, subStatus*, shortVersion, and swErr
message ZInfoDevSW {
  bool activated = 2;
  string partitionLabel = 3; // E.g., "IMGA"
  string partitionDevice = 4;// /dev/something
  string partitionState = 5; // state obtained from cboot

  // Once BaseOs start using ContentTrees, this field may be deprecated.
  ZSwState status = 6;       // E.g., "DOWNLOADED"

  string shortVersion = 7;   // From rootfs i.e., image
  string longVersion = 8;    // E.g., the yml file content from build
  ErrorInfo swErr = 9;
  uint32 downloadProgress = 10; // Download progress; 0-100 percent
  BaseOsStatus userStatus = 11;
  string subStatusStr = 12;     // English formatted string
  BaseOsSubStatus subStatus = 13;
  uint32 subStatusProgress = 14; // Context-dependent; percentage or time
}

enum BaseOsStatus {
  NONE          = 0;    // Should be ignored in output
  DOWNLOADING   = 1;    // subStatus will have more details
  DOWNLOAD_DONE = 2;    // Terminal state if user action was to download
  UPDATING      = 3;    // subStatus will have more details including
                        // whether it is rebooting, or testing
  UPDATED       = 4;    // Running the configured baseimage
  FALLBACK      = 5;    // Fallback image during testing
  FAILED        = 6;    // See ErrInfo for details
}

enum BaseOsSubStatus {
  NONE_SUBSTATUS      = 0;
  DOWNLOAD_INPROGRESS = 1;      // subStatusProgress is percentage
  VERIFY_INPROGRESS   = 2;      // subStatusProgress is percentage
  UPDATE_INITIALIZING = 3;
  UPDATE_REBOOTING    = 4;      // subStatusProgress is time left
  UPDATE_TESTING      = 5;      // subStatusProgress is time left
  UPDATE_NEED_TEST_CONFIRM = 6; // waiting for controller to commit to new
  UPDATE_DEFERRED = 7; // waiting for current update to finish
}

// Per filesystem/partition information
message ZInfoStorage {
  string device = 1;        // E.g., "sda3"
  string mountPath = 2;     // E.g., "/", or "/config"
  uint64 total = 3;         // in MBytes
  bool storageLocation = 4; // Storage location for app disks, images etc.
}

message ZInfoApp {
  string AppID = 1;
  string appVersion = 2;

  bool systemApp = 6;
  string AppName = 7;

  // EVE stopped sending this. Can be removed.
  repeated ZInfoSW softwareList = 8; // XXX to be deprecated in favor of volumeRefs
  // deprecated = 9;
  // deprecated = 11;

  google.protobuf.Timestamp bootTime = 12;
  repeated ZioBundle assignedAdapters = 13;
  repeated ErrorInfo appErr = 14;
  ZSwState state = 15;
  repeated ZInfoNetwork network = 16;       // up/down; allocated IP
  repeated string volumeRefs = 17;          // volume UUIDs
}

// ipSec state information
enum ZInfoVpnState {
  VPN_INVALID     = 0;
  VPN_INITIAL     = 1;  // Config received
  VPN_CONNECTING  = 2;  // Connection is in-progress
  VPN_ESTABLISHED = 3;  // Connection established
  VPN_INSTALLED   = 4;  // SAs/Routes Installed
  VPN_REKEYED     = 5;  // SAs Rekeyed
  VPN_DELETED     = 10; // Connection deleted
}

// tunnel link details
message ZInfoVpnLinkInfo {
  string spiId = 1;   // Security Parameter Index
  string subNet = 2;  // Associate Subnet
  bool direction = 3; // 0 = local, 1 = remote
}

// Esp details
message ZInfoVpnLink {
  string id = 1;       // esp id
  string name = 2;     // connection name
  string reqId = 3;    // request id
  uint64 instTime = 4; // in seconds
  string espInfo = 5;  // esp info
  ZInfoVpnState state = 6; // esp state
  ZInfoVpnLinkInfo lInfo = 10; // local
  ZInfoVpnLinkInfo rInfo = 11; // remote
}

// ipsec left/right end-point info
message ZInfoVpnEndPoint {
  string id     = 1; // ipSec id
  string ipAddr = 2; // Ip Address
  uint32 port   = 3; // udp port
}

// Ike details
message ZInfoVpnConn {
  string id = 1;      // ike id
  string name = 2;    // connection name
  string version = 3; // ike-v1/v2
  uint64 estTime = 4; // in seconds
  string ikes = 5;    // ike proposals
  ZInfoVpnState state = 6; // ike state
  ZInfoVpnEndPoint lInfo = 7;  // local
  ZInfoVpnEndPoint rInfo = 8;  // remote
  repeated ZInfoVpnLink links = 10; // can be more than one
}

// ipsec level information
message ZInfoVpn {
  uint64 upTime = 1; // in seconds
  bool policyBased = 2; // Policy-based vs. VTI-based IPSEC VPN
  repeated string listeningIpAddrs = 3; //listening on
  repeated ZInfoVpnConn conn = 10; // Connection Information
}

enum ZNetworkInstanceState {
    ZNETINST_STATE_UNSPECIFIED = 0;
    ZNETINST_STATE_INIT = 1;
    // Terminal State.
    ZNETINST_STATE_ONLINE = 2;
    // Terminal State.
    ZNETINST_STATE_ERROR = 3;
}

// Network Instance information
message ZInfoNetworkInstance {
  string networkID = 2;        // UUID
  string networkVersion = 3;   // From Network Instance config

  uint32 instType = 5;         // ZNetworkInstType
  string displayname = 6;      // From NetworkInstance config
  bool activated = 7;          // Forwarding enabled
  google.protobuf.Timestamp upTimeStamp = 8;
  // OBSOLETE - No longer used.
  ZInfoSW softwareList = 9;    // E.g., VPN version; XXX to be deprecated?

  string CurrentUplinkIntf = 10;  // current uplink interface in use by this NI
  string CurrentUplinkAlias = 11; // user defined namestring alias to this CurrentUplinkIntf, for future
  uint32 bridgeNum = 20;
  string bridgeName = 21;
  string bridgeIPAddr = 22;

  repeated ZmetIPAssignmentEntry ipAssignments = 23;
  repeated string bridgeIPSets = 24; // Union of all ipsets for the bridge
  repeated ZmetVifInfo vifs = 25; // Set of vifs on this bridge
  bool ipv4Eid = 26; // Track if this is a CryptoEid with IPv4 EIDs

  repeated ZioBundle assignedAdapters = 30;
  oneof InfoContent {
    ZInfoVpn vinfo = 31;
    // deprecated = 32; ZInfoLisp linfo = 32
  }
  repeated ErrorInfo networkErr = 40;
  ZNetworkInstanceState state = 41;
}

message UsageInfo {
  google.protobuf.Timestamp createTime = 1;
  uint32 refCount = 2;
  google.protobuf.Timestamp lastRefcountChangeTime = 3; // Last time when refCount changed
}

message VolumeResources {
  uint64 maxSizeBytes = 1; // From config
  uint64 curSizeBytes = 2; // Current disk usage
}

// Information about a particular volume based on the Volume config
message ZInfoVolume {
  string uuid = 1;
  string displayName = 2;
  UsageInfo usage = 3;
  VolumeResources resources = 4;
  // Allowed States:
  //    UNSPECIFIED
  //    INITIAL
  //    CREATED_VOLUME  ( Terminal State )
  //    DOWNLOADING
  //    VERIFYING
  //    LOADING
  //    ERROR    ( Terminal State )
  ZSwState state = 5;
  uint32 progressPercentage = 6; // 0-100% Use depends on state i.e., download vs. verification vs. volume creation

  ErrorInfo volumeErr = 7;
  int64 generation_count = 8; // version of volume
}

message ContentResources {
  uint64 curSizeBytes = 1;  // Current disk usage
}

// ZInfoContentTree is used to describe the top of a tree, which has
// a UUID (and displayName) from the config ContentTree message.
// The components (or blobs) used by that are referenced by the compoentShaList
// and in a separate ZInfoBlobList info message
message ZInfoContentTree {
  string uuid = 1;
  string displayName = 2;
  string sha256 = 3;
  ContentResources resources = 4;
  UsageInfo usage = 5;
  // Allowed States:
  //    UNSPECIFIED
  //    INITIAL
  //    DOWNLOADING
  //    VERIFYING
  //    LOADING
  //    LOADED   ( Terminal State )
  //    ERROR    ( Terminal State )
  ZSwState state = 6;
  uint32 progressPercentage = 7; // 0-100% Depending on state if it is download or verification

  ErrorInfo err = 8;
  repeated string componentShaList = 9; // sha's for the referenced blobs
  int64 generation_count = 10; // version of content tree
}

message ZInfoBlob {
  string sha256 = 1;
  ContentResources resources = 2;
  UsageInfo usage = 3;
  // Allowed States:
  //    UNSPECIFIED
  //    INITIAL
  //    DOWNLOADING
  //    VERIFYING
  //    LOADING
  //    LOADED   ( Terminal State )
  //    ERROR    ( Terminal State )
  ZSwState state = 4;
  uint32 progressPercentage = 5; // 0-100% Depending on state if it is download or verification
  ErrorInfo err = 6;
}

// For efficiency EVE can send many/all the blobs in one info message
message ZInfoBlobList {
  repeated ZInfoBlob blob = 1;
}

// This is the request payload for POST /api/v1/edgeDevice/info
// ZInfoMsg carries event-triggered state changes for one object (a device,
// an app instance, or a network instance). As such the messages are retransmitted
// until they make it to the controller, however subsequent state change to the
// object will replace any attempts to (re)transmit the previous message for
// that object.
message ZInfoMsg {
  ZInfoTypes ztype = 1;
  string devId = 2;
  oneof InfoContent {
    ZInfoDevice dinfo = 3;
    ZInfoApp ainfo = 5;
    // deprecated = 10;
    // deprecated = 11;
    ZInfoNetworkInstance niinfo = 12;
    ZInfoVolume vinfo = 13;
    ZInfoContentTree cinfo = 14;
    ZInfoBlobList binfo = 15;
    ZInfoAppInstMetaData amdinfo = 16;
    // evinfo include only if the edge-view is running on device
    ZInfoEdgeview evinfo = 17;
    ZInfoHardware hwinfo = 18;
    ZInfoLocation locinfo = 19;
  }
  google.protobuf.Timestamp atTimeStamp = 6;
}

// Information about hardware capabilities of node
message Capabilities {
  // VMX/SVM for amd64 or Arm virtualization extensions for arm64
  bool HWAssistedVirtualization = 2;
  // I/O Virtualization support
  bool IOVirtualization = 3;
}

// AppInstMetaData sends meta data of an application instance
// e.g kubeconfig, etc
// Size of app meta data <= 32KB
message ZInfoAppInstMetaData {
  string uuid = 1;
  AppInstMetaDataType type = 2;
  bytes data = 3;
}

// ZInfoEdgeview - edge-view operation status/event
message ZInfoEdgeview {
  // expires on timestamp
  google.protobuf.Timestamp expire_time = 1;
  // started timestamp
  google.protobuf.Timestamp started_time = 2;
  // total number of device related cmds edge-view has processed
  uint32 count_dev = 3;
  // total number of app related cmds edge-view has processed
  uint32 count_app = 4;
  // total number of external related cmds edge-view has processed
  uint32 count_ext = 5;
}

// LocReliability - reliability of location information.
enum LocReliability {
  LOC_RELIABILITY_UNSPECIFIED = 0;
  LOC_RELIABILITY_VERY_LOW = 1;
  LOC_RELIABILITY_LOW = 2;
  LOC_RELIABILITY_MEDIUM = 3;
  LOC_RELIABILITY_HIGH = 4;
}

// ZInfoLocation - geographic location of the device obtained from a GNSS receiver.
message ZInfoLocation {
  // Latitude in the Decimal degrees (DD) notation.
  // Valid values are in the range <-90, 90>. Anything outside of this range
  // should be treated as an unavailable value.
  // However, note that EVE avoids publishing location updates without valid
  // latitude and longitude values.
  double latitude = 1;
  // Longitude in the Decimal degrees (DD) notation.
  // Valid values are in the range <-180, 180>. Anything outside of this range
  // should be treated as an unavailable value.
  // However, note that EVE avoids publishing location updates without valid
  // latitude and longitude values.
  double longitude = 2;
  // Altitude w.r.t. mean sea level in meters.
  // Value of -32768 is reported when altitude is not known.
  double altitude = 3;
  // UTC timestamp for the location measurement
  // (recorded by the GNSS clock).
  // Currently, this timestamp is limited to millisecond resolution.
  // When the timestamp is not available, EVE returns the Unix epoch time
  // (UTC midnight on January 1, 1970).
  google.protobuf.Timestamp utc_timestamp = 4;
  // Reliability of the provided information for latitude and longitude.
  LocReliability horizontal_reliability = 5;
  // Reliability of the provided information for altitude.
  LocReliability vertical_reliability = 6;
  // Circular horizontal position uncertainty in meters.
  // Negative values are not valid and represent unavailable uncertainty.
  float horizontal_uncertainty = 7;
  // Vertical position uncertainty in meters.
  // Negative values are not valid and represent unavailable uncertainty.
  float vertical_uncertainty = 8;
  // Logical label of the device used to obtain this location information.
  // If the GNSS receiver is integrated with an LTE modem, then this is the logical
  // label from the modem's PhysicalIO entry.
  string logicallabel = 9;
}
